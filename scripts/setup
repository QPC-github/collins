#!/usr/bin/env ruby

require 'tempfile'
require 'fcntl'

def get_line
  $stdin.gets.strip
end
def confirm_yes msg, ec
  if get_line.downcase.index('y') != 0 then
    puts msg
    exit ec.to_i
  end
end
def print_block str, trailing = false
  puts ""
  puts str
  puts "" if trailing
end

# Trap SIGINT so we can cleanup tmpfile
trap('SIGINT') {
  exit 1
}

class Application
  DEFAULTS = {
    :APP_HOME => [File.expand_path("..",File.dirname(__FILE__)), "The directory where the app will be installed"],
    :DAEMON => ["/usr/local/bin/daemon", "The absolute path to the daemon binary"],
    :LISTEN_PORT => [8080, "The port to listen on"],
    :COLLINS_USER => ["nobody", "The user for collins to run is. This user must already exist"]
  }
  def collect_configs
    DEFAULTS.inject({}) do |res, (key, array)|
      value = array[0]
      description = array[1]
      print "#{key.to_s} - #{description} (default value: #{value})? "
      response = get_line.strip
      if response.empty? then
        puts "Using default value #{value}\n"
        res[key] = value
      else
        if value.is_a?(Fixnum) then
          puts "Using user specified value #{response.to_i}\n"
          res[key] = response.to_i
        else
          puts "Using user specified value #{response}\n"
          res[key] = response
        end
      end
      res
    end
  end
  def tmpfile
    @tmpfile ||= get_tmpfile
  end
  def tmpfilename
    @tmpfilename ||= File.join(Dir.tmpdir, "sysconfig-#{Time.new.to_i}-#{$$}")
  end
  # Cleanup after tmpfile if exit code was non-zero
  def shutdown
    if @tmpfile.nil? then
      print_block "Exiting and no cleanup needed"
      return
    end
    exit_code = $!.respond_to?(:status) ? $!.status : 1
    if exit_code != 0 then
      print_block "Deleting tempfile after aborted or failed attempt"
      tmpfile.close
      File.unlink(tmpfilename)
    end
  end
  private
  def get_tmpfile
    # Do this to avoid stomping on existing files. Will fail if file already exists
    fd = IO::sysopen(tmpfilename, Fcntl::O_WRONLY | Fcntl::O_EXCL | Fcntl::O_CREAT)
    IO.open(fd)
  end
end

application = Application.new
at_exit {
  application.shutdown
}

print_block %{
This script will setup collins for a production like environment
for use with a MySQL database. You will be asked a few questions
which will be used for the setup. We'll walk you through
everything being done. When we're done you will move a config file
into /etc/sysconfig/collins.
}.strip, true

print "Are you ready to proceed? "
confirm_yes "No worries, it's a big step", 1

print_block %{
You will be presented with the basic required setup options. To accept
the default, just hit return without specifying a new value.
}.strip, true

configs = application.collect_configs
configs_displayed = configs.map{|k,v| "#{k}=#{v}"}.join("\n")

print_block %{
You have specified the following configuration:

#{configs_displayed}
}.strip, true

print "Does this look correct? "
confirm_yes "Okay, you can try again", 1

configs.each do |k,v|
  application.tmpfile.syswrite "#{k}=#{v}\n"
end

print_block %{
You now have a config file in #{application.tmpfilename}
}.strip

collins_user = configs[:COLLINS_USER]
app_home = configs[:APP_HOME]

print_block %{
Execute the following commands to finish configuration.
# mv #{application.tmpfilename} /etc/sysconfig/collins
# for dir in /var/log/collins /var/run/collins; do sudo mkdir $dir; sudo chown #{collins_user} $dir; done
# sudo -u #{collins_user} #{app_home}/scripts/collins.sh initdb collins_db_username collins_db_password

Note that if you modify collins_db_username or collins_db_password that should also be reflected in
conf/production.conf
}.strip

exit 0

# vim modeline
# vim: set filetype=ruby

